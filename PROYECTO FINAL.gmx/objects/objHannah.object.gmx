<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHannah</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// inicializaci√≥n 

gravity = 0.4;
hsp = 0;
vspeed = 0;

movespeed=4;
jumpspeed=7;

//items

bateria=false;
linterna=false;

//instance_create(objHannah.x,objHannah.y,objOscuridad);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///colision
/// movimiento del personaje 

// obtener las entradas del teclado 
key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);
key_up = keyboard_check_pressed (vk_up);

// operaciones con las entradas del teclado 
move = key_right - key_left;
hsp = move * movespeed;

// colision horizontal
/*if (place_meeting(x+hsp, y, objBloque))//||(place_meeting(x+hsp,y,objPuerta))
{
    while(!place_meeting(x+sign(hsp), y, objBloque))//&amp;&amp;(!place_meeting(x+sign(hsp),y,objPuerta))
    {
    x += sign (hsp);  
    }
    hsp = 0;
}
*/
x += hsp;
/*if (vsp &lt; 10) {vsp += grav;}
if (place_meeting(x, y+3, objBloque)){
    vsp = key_up *  -jumpspeed;
}
*/
// colision vertical
/*if (place_meeting(x, y+vsp, objBloque))//||(place_meeting(x,y+vsp,objPuerta))
{
    while(!place_meeting(x, y+sign(vsp), objBloque))//&amp;&amp;(!place_meeting(x,y+sign(vsp),objPuerta))
    {
        y += sign (vsp);  
    }
    vsp = 0;
}*/
//y += vsp;

if(movespeed){
    if(-move){
    sprite_index= sprIZQ;
    }  
    if(move){
    sprite_index= sprDER;
    }
    if(move=0&amp;&amp;-move=0){
     sprite_index= sprHannah
    }
}
/*
//distancia
if(distance_to_object(objInvisible)&gt;185){
instance_destroy();
room_restart();
}
//Luz
//if(linterna&amp;&amp;bateria){
}
*/
if(distance_to_point(x, view_yview[0]) &gt; 240)
{
    instance_destroy();
    room_restart();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBloque">
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objLinterna">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///captura de linterna
with(other){
instance_destroy()};
linterna = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBateria">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///captura de bateria
with(other){
instance_destroy()};
bateria = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
